(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{524:function(s,e,t){"use strict";t.r(e);var n=t(4),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("JS 语言的一大特点就是单线程，所有任务都在主线程上运行，，也就是说，同一个时间只能做一件事。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，就出现了 Event Loop。")]),s._v(" "),t("h2",{attrs:{id:"_1-event-loop执行任务流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-event-loop执行任务流程"}},[s._v("#")]),s._v(" 1.Event Loop执行任务流程")]),s._v(" "),t("img",{attrs:{src:"https://blogimg2020.oss-cn-shenzhen.aliyuncs.com/blogimg/19025755-fff334d16d186d2c.webp",alt:"19025755-fff334d16d186d2c"}}),s._v(" "),t("ul",[t("li",[s._v("同步和异步任务分别进入不同的执行场所，同步任务进入主线程，异步任务进去 Event Table 并注册函数")]),s._v(" "),t("li",[s._v("注册回调函数后，Event Table 会将任务移入 Event Queue")]),s._v(" "),t("li",[s._v("主线程内的同步任务执行完毕后，会去 Event Queue 读取异步任务，进入主线程执行")]),s._v(" "),t("li",[s._v("上述过程会不断重复，也就是 Event Loop")])]),s._v(" "),t("h2",{attrs:{id:"_2-宏任务与微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-宏任务与微任务"}},[s._v("#")]),s._v(" 2.宏任务与微任务")]),s._v(" "),t("p",[s._v("宏任务：")]),s._v(" "),t("ul",[t("li",[s._v("script（整体代码）")]),s._v(" "),t("li",[s._v("setTimeout")]),s._v(" "),t("li",[s._v("setInterval")]),s._v(" "),t("li",[s._v("I/O")]),s._v(" "),t("li",[s._v("requestAnimationFrame（浏览器环境）")]),s._v(" "),t("li",[s._v("postMessage")]),s._v(" "),t("li",[s._v("MessageChannel")]),s._v(" "),t("li",[s._v("setImmediate（Nodejs 环境）")])]),s._v(" "),t("p",[s._v("微任务：")]),s._v(" "),t("ul",[t("li",[s._v("Promise.then")]),s._v(" "),t("li",[s._v("queueMicrotask")]),s._v(" "),t("li",[s._v("Object.observe（已废弃）")]),s._v(" "),t("li",[s._v("MutationObserver（html5新特性）")]),s._v(" "),t("li",[s._v("process.nextTick（Nodejs 环境）")])]),s._v(" "),t("h2",{attrs:{id:"_3-宏任务与微任务的执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-宏任务与微任务的执行过程"}},[s._v("#")]),s._v(" 3.宏任务与微任务的执行过程")]),s._v(" "),t("ol",[t("li",[s._v("执行一个宏任务（执行栈中没有就从事件队列中获取）(同步任务也属于宏任务)")]),s._v(" "),t("li",[s._v("执行过程中如果遇到微任务，就将它添加到微任务队列中")]),s._v(" "),t("li",[s._v("宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）")]),s._v(" "),t("li",[s._v("当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染")]),s._v(" "),t("li",[s._v("渲染完毕后，JS 线程继续接管，开始下一个宏任务（从事件队列中获取）")])]),s._v(" "),t("img",{attrs:{src:"https://blogimg2020.oss-cn-shenzhen.aliyuncs.com/blogimg/v2-e6dd78c74cb671dd9408c2273308a265_720w.jpg",alt:"v2-e6dd78c74cb671dd9408c2273308a265_720w"}}),s._v(" "),t("h2",{attrs:{id:"_4-node-js-中的事件循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-node-js-中的事件循环"}},[s._v("#")]),s._v(" 4.Node.js 中的事件循环")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("   ┌───────────────────────────┐\n┌─"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("│           timers         │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("   │\n│  │           poll            │"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("─────┤  connections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" │\n│  └─────────────┬─────────────┘      │   data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" etc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks     │\n   └───────────────────────────┘\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("timers：")]),s._v(" 计时器阶段，用于处理 "),t("code",[s._v("setTimeout")]),s._v(" 以及 "),t("code",[s._v("setInterval")]),s._v(" 的回调函数")]),s._v(" "),t("li",[t("strong",[s._v("pending callbacks：")]),s._v(" 用于执行某些系统操作的回调，例如TCP错误")]),s._v(" "),t("li",[t("strong",[s._v("idle, prepare：")]),s._v(" Node内部使用，不用做过多的了解")]),s._v(" "),t("li",[t("strong",[s._v("poll：")]),s._v(" 轮询阶段，执行队列中的 I/O 队列，并检查定时器是否到时")]),s._v(" "),t("li",[t("strong",[s._v("check：")]),s._v(" 执行 "),t("code",[s._v("setImmediate")]),s._v(" 的回调")]),s._v(" "),t("li",[t("strong",[s._v("close callbacks：")]),s._v(" 处理关闭的回调，例如 socket.destroy()")])]),s._v(" "),t("p",[t("code",[s._v("process.nextTick")]),s._v(" 是Node.js中一个特殊的微任务，因此会为它单独提供一个队列，称为 "),t("strong",[s._v("next tick queue")]),s._v("，并且其优先级大于其它的微任务，即若同时存在 "),t("code",[s._v("process.nextTick")]),s._v(" 和 "),t("code",[s._v("promise")]),s._v("，则会先执行前者")])])}),[],!1,null,null,null);e.default=a.exports}}]);